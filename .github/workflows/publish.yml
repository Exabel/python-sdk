name: Build, test and publish Python Package

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-package:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Check git tag against package version and get python version
      run: |
        ./check_package_version.sh
        echo "::set-output name=VERSION::$(<.python-version)"
      id: python-version

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ steps.python-version.outputs.VERSION }}

    - name: Install dependencies and build package
      run: |
        pip install pipenv wheel
        pipenv sync --system
        ./build.sh

    - name: Cache build
      uses: actions/cache@v3
      with:
        path: ./dist
        key: build-cache

  test-package:
    needs: build-package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      fail-fast: true

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Recover cache
      uses: actions/cache@v3
      with:
        path: ./dist
        key: build-cache

    - name: Install SDK from cache
      run: |
        PACKAGE=$(ls ./dist/ | grep -P .+\.whl$)
        pip install ./dist/$PACKAGE --no-cache-dir

    - name: Run unit tests
      run: |
        mkdir -p tests/exabel_data_sdk
        cp -r ./exabel_data_sdk/tests ./tests/exabel_data_sdk/
        cd ./tests/
        python -m unittest discover -s ./exabel_data_sdk/tests

  publish-package-to-pypi:
    if: always()
    needs: test-package
    runs-on: ubuntu-latest

    steps:
    - name: Recover cache
      if: needs.test-package.result == 'success'
      uses: actions/cache@v3
      with:
        path: ./dist
        key: build-cache

    - name: Publish package to PyPI
      if: needs.test-package.result == 'success'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Post status to Slack
      if: ${{ success() }}
      uses: ravsamhq/notify-slack-action@v2
      with:
        status: ${{ needs.test-package.result == 'success' && 'success' || 'failure' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.NOTIFY_SLACK_ACTION_WEBHOOK_URL }}

    - name: Post failure to Slack
      if: ${{ failure() || cancelled() }}
      uses: ravsamhq/notify-slack-action@v2
      with:
        status: 'failure'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.NOTIFY_SLACK_ACTION_WEBHOOK_URL }}
