"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright (c) 2019-2022 Exabel AS. All rights reserved."""
import builtins
import collections.abc
from ..... import exabel
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys
if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class ListTimeSeriesRequest(google.protobuf.message.Message):
    """The request to list time series. This request has an implicit empty `TimeSeriesView` parameter,
    so only the canonical names are returned.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PARENT_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    parent: builtins.str
    'The parent entity or signal of time series to list, for example `entityTypes/ns.type1/entities/ns.entity1`\n    or `signal/ns.signal1`.\n    '
    page_size: builtins.int
    'Maximum number of results to return. Defaults to 1000, which is the maximum allowed value.'
    page_token: builtins.str
    'Token for a specific page of results, as returned from a previous list request with the same\n    query parameters.\n    '

    def __init__(self, *, parent: builtins.str | None=..., page_size: builtins.int | None=..., page_token: builtins.str | None=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['page_size', b'page_size', 'page_token', b'page_token', 'parent', b'parent']) -> None:
        ...
global___ListTimeSeriesRequest = ListTimeSeriesRequest

@typing_extensions.final
class ListTimeSeriesResponse(google.protobuf.message.Message):
    """The response to list time series. Returns all matching time series."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TIME_SERIES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    TOTAL_SIZE_FIELD_NUMBER: builtins.int

    @property
    def time_series(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[exabel.api.data.v1.time_series_messages_pb2.TimeSeries]:
        """List of time series. Only the resource `name` field is returned."""
    next_page_token: builtins.str
    'Token for the next page of results, which can be sent to a subsequent query.'
    total_size: builtins.int
    'Total number of results, irrespective of paging.'

    def __init__(self, *, time_series: collections.abc.Iterable[exabel.api.data.v1.time_series_messages_pb2.TimeSeries] | None=..., next_page_token: builtins.str | None=..., total_size: builtins.int | None=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['next_page_token', b'next_page_token', 'time_series', b'time_series', 'total_size', b'total_size']) -> None:
        ...
global___ListTimeSeriesResponse = ListTimeSeriesResponse

@typing_extensions.final
class GetTimeSeriesRequest(google.protobuf.message.Message):
    """The request to get one time series. The returned time series will contain its canonical name.
    Not all time series are capable of returning data.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    VIEW_FIELD_NUMBER: builtins.int
    name: builtins.str
    'The resource name of the requested time series, for example\n    `entityTypes/ns.type1/entities/ns.entity1/signals/ns.signal1`\n    or `signals/ns.signal1/entityTypes/ns.type1/entities/ns.entity1`. The returned time series will\n    always contain its canonical name `entityTypes/ns.type1/entities/ns.entity1/signals/ns.signal1`.\n    '

    @property
    def view(self) -> exabel.api.data.v1.time_series_messages_pb2.TimeSeriesView:
        """Specifies which parts of the time series should be returned in the request."""

    def __init__(self, *, name: builtins.str | None=..., view: exabel.api.data.v1.time_series_messages_pb2.TimeSeriesView | None=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['view', b'view']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['name', b'name', 'view', b'view']) -> None:
        ...
global___GetTimeSeriesRequest = GetTimeSeriesRequest

@typing_extensions.final
class CreateTimeSeriesRequest(google.protobuf.message.Message):
    """The request to create one time series. The parents of the time series will be inferred from
    `time_series.name`. The returned time series will contain its canonical name.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TIME_SERIES_FIELD_NUMBER: builtins.int
    VIEW_FIELD_NUMBER: builtins.int
    DEFAULT_KNOWN_TIME_FIELD_NUMBER: builtins.int
    CREATE_TAG_FIELD_NUMBER: builtins.int

    @property
    def time_series(self) -> exabel.api.data.v1.time_series_messages_pb2.TimeSeries:
        """The time series to create."""

    @property
    def view(self) -> exabel.api.data.v1.time_series_messages_pb2.TimeSeriesView:
        """Specifies which parts of the time series should be returned in the request."""

    @property
    def default_known_time(self) -> exabel.api.data.v1.time_series_messages_pb2.DefaultKnownTime:
        """The specification of the default known time to use for points that don't explicitly have a
        known time set. If not set, the time of insertion is used as the default known time
        (`current_time = true`).
        """
    create_tag: builtins.bool
    'Set to `true` to create a "coverage" tag containing all entities that have time series, for\n    this signal and entity type. If this tag already exists, setting `create_tag` to `true` will\n    update it with all entities that have time series.\n    '

    def __init__(self, *, time_series: exabel.api.data.v1.time_series_messages_pb2.TimeSeries | None=..., view: exabel.api.data.v1.time_series_messages_pb2.TimeSeriesView | None=..., default_known_time: exabel.api.data.v1.time_series_messages_pb2.DefaultKnownTime | None=..., create_tag: builtins.bool | None=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['default_known_time', b'default_known_time', 'time_series', b'time_series', 'view', b'view']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['create_tag', b'create_tag', 'default_known_time', b'default_known_time', 'time_series', b'time_series', 'view', b'view']) -> None:
        ...
global___CreateTimeSeriesRequest = CreateTimeSeriesRequest

@typing_extensions.final
class UpdateTimeSeriesRequest(google.protobuf.message.Message):
    """The request to update one time series. The returned time series will contain its canonical name."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TIME_SERIES_FIELD_NUMBER: builtins.int
    VIEW_FIELD_NUMBER: builtins.int
    DEFAULT_KNOWN_TIME_FIELD_NUMBER: builtins.int
    ALLOW_MISSING_FIELD_NUMBER: builtins.int
    CREATE_TAG_FIELD_NUMBER: builtins.int

    @property
    def time_series(self) -> exabel.api.data.v1.time_series_messages_pb2.TimeSeries:
        """The time series to update. The data in this request and the existing data are merged together:
        All points in the request will overwrite the existing points with the same key, unless
        the new value is empty, in which case the point will be deleted.
        """

    @property
    def view(self) -> exabel.api.data.v1.time_series_messages_pb2.TimeSeriesView:
        """Specifies which parts of the time series should be returned in the request."""

    @property
    def default_known_time(self) -> exabel.api.data.v1.time_series_messages_pb2.DefaultKnownTime:
        """The specification of the default known time to use for points that don't explicitly have a
        known time set. If not set, the time of insertion is used as the default known time
        (`current_time = true`).
        """
    allow_missing: builtins.bool
    'If set to `true`, a new time series will be created if it did not exist.'
    create_tag: builtins.bool
    'Set to `true` to create a "coverage" tag containing all entities that have time series, for\n    this signal and entity type. If this tag already exists, setting `create_tag` to `true` will\n    update it with all entities that have time series.\n    This flag is only relevant if `allow_missing` is set to `true`.\n    '

    def __init__(self, *, time_series: exabel.api.data.v1.time_series_messages_pb2.TimeSeries | None=..., view: exabel.api.data.v1.time_series_messages_pb2.TimeSeriesView | None=..., default_known_time: exabel.api.data.v1.time_series_messages_pb2.DefaultKnownTime | None=..., allow_missing: builtins.bool | None=..., create_tag: builtins.bool | None=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['default_known_time', b'default_known_time', 'time_series', b'time_series', 'view', b'view']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['allow_missing', b'allow_missing', 'create_tag', b'create_tag', 'default_known_time', b'default_known_time', 'time_series', b'time_series', 'view', b'view']) -> None:
        ...
global___UpdateTimeSeriesRequest = UpdateTimeSeriesRequest

@typing_extensions.final
class ImportTimeSeriesRequest(google.protobuf.message.Message):
    """The request to import multiple time series. The parents of the time series will be inferred from
    `time_series.name`.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PARENT_FIELD_NUMBER: builtins.int
    TIME_SERIES_FIELD_NUMBER: builtins.int
    DEFAULT_KNOWN_TIME_FIELD_NUMBER: builtins.int
    ALLOW_MISSING_FIELD_NUMBER: builtins.int
    CREATE_TAG_FIELD_NUMBER: builtins.int
    parent: builtins.str
    'The common parent of all time series to import. May include `-` as a wild card.'

    @property
    def time_series(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[exabel.api.data.v1.time_series_messages_pb2.TimeSeries]:
        """One or more time series to import."""

    @property
    def default_known_time(self) -> exabel.api.data.v1.time_series_messages_pb2.DefaultKnownTime:
        """The specification of the default known time to use for points that don't explicitly have a
        known time set. If not set, the time of insertion is used as the default known time
        (`current_time = true`).
        """
    allow_missing: builtins.bool
    'If set to `true`, new time series will be created if they did not exist.'
    create_tag: builtins.bool
    'Set to `true` to create a "coverage" tag containing all entities that have time series, for\n    this signal and entity type. If this tag already exists, setting `create_tag` to `true` will\n    update it with all entities that have time series.\n    This flag is only relevant if `allow_missing` is set to `true`.\n    '

    def __init__(self, *, parent: builtins.str | None=..., time_series: collections.abc.Iterable[exabel.api.data.v1.time_series_messages_pb2.TimeSeries] | None=..., default_known_time: exabel.api.data.v1.time_series_messages_pb2.DefaultKnownTime | None=..., allow_missing: builtins.bool | None=..., create_tag: builtins.bool | None=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['default_known_time', b'default_known_time']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['allow_missing', b'allow_missing', 'create_tag', b'create_tag', 'default_known_time', b'default_known_time', 'parent', b'parent', 'time_series', b'time_series']) -> None:
        ...
global___ImportTimeSeriesRequest = ImportTimeSeriesRequest

@typing_extensions.final
class ImportTimeSeriesResponse(google.protobuf.message.Message):
    """The response to import multiple time series."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(self) -> None:
        ...
global___ImportTimeSeriesResponse = ImportTimeSeriesResponse

@typing_extensions.final
class DeleteTimeSeriesRequest(google.protobuf.message.Message):
    """The request to delete one time series."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    name: builtins.str
    'The resource name of the time series to be deleted, for example\n    `entityTypes/ns.type1/entities/ns.entity1/signals/ns.signal1` or\n    `signals/ns.signal1/entityTypes/ns.type1/entities/ns.entity1`.\n    '

    def __init__(self, *, name: builtins.str | None=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['name', b'name']) -> None:
        ...
global___DeleteTimeSeriesRequest = DeleteTimeSeriesRequest

@typing_extensions.final
class BatchDeleteTimeSeriesPointsRequest(google.protobuf.message.Message):
    """The request to delete parts of one time series."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    TIME_RANGES_FIELD_NUMBER: builtins.int
    name: builtins.str
    'The resource name of the time series to be deleted, for example\n    `entityTypes/ns.type1/entities/ns.entity1/signals/ns.signal1` or\n    `signals/ns.signal1/entityTypes/ns.type1/entities/ns.entity1`.\n    '

    @property
    def time_ranges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[exabel.api.time.time_range_pb2.TimeRange]:
        """The list of time ranges to delete from the time series. Each time range may
        be expanded to whole hours (UTC time).
        """

    def __init__(self, *, name: builtins.str | None=..., time_ranges: collections.abc.Iterable[exabel.api.time.time_range_pb2.TimeRange] | None=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['name', b'name', 'time_ranges', b'time_ranges']) -> None:
        ...
global___BatchDeleteTimeSeriesPointsRequest = BatchDeleteTimeSeriesPointsRequest