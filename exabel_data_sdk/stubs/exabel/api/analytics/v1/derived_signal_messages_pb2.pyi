"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright (c) 2022 Exabel AS. All rights reserved."""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import sys
import typing
if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _DerivedSignalUnit:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _DerivedSignalUnitEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_DerivedSignalUnit.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    DERIVED_SIGNAL_UNIT_INVALID: _DerivedSignalUnit.ValueType
    'Signal unit was not specified.'
    NUMBER: _DerivedSignalUnit.ValueType
    'Signal represents normal floating point numbers. This is the default value.'
    RATIO: _DerivedSignalUnit.ValueType
    'Signal represents a ratio, typically with values in the interval [0, 1]. Values will be\n    displayed as a percentage.\n    '
    RATIO_DIFFERENCE: _DerivedSignalUnit.ValueType
    'Signal represents a difference in a ratio. Values will be displayed as percentage points.'

class DerivedSignalUnit(_DerivedSignalUnit, metaclass=_DerivedSignalUnitEnumTypeWrapper):
    """Unit of the signal."""
DERIVED_SIGNAL_UNIT_INVALID: DerivedSignalUnit.ValueType
'Signal unit was not specified.'
NUMBER: DerivedSignalUnit.ValueType
'Signal represents normal floating point numbers. This is the default value.'
RATIO: DerivedSignalUnit.ValueType
'Signal represents a ratio, typically with values in the interval [0, 1]. Values will be\ndisplayed as a percentage.\n'
RATIO_DIFFERENCE: DerivedSignalUnit.ValueType
'Signal represents a difference in a ratio. Values will be displayed as percentage points.'
global___DerivedSignalUnit = DerivedSignalUnit

class _DerivedSignalType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _DerivedSignalTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_DerivedSignalType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    DERIVED_SIGNAL_TYPE_INVALID: _DerivedSignalType.ValueType
    'Signal type was not specified.'
    DERIVED_SIGNAL: _DerivedSignalType.ValueType
    'Signal is a derived signal, with an editable label and expression. This is the default value.'
    FILE_UPLOADED_SIGNAL: _DerivedSignalType.ValueType
    'Signal uploaded through the legacy File Uploader. The expression refers to a raw signal and\n    cannot be modified.\n    '
    FILE_UPLOADED_COMPANY_SIGNAL: _DerivedSignalType.ValueType
    'Signal uploaded through the legacy File Uploader. The expression refers to a raw signal and\n    cannot be modified.\n    '
    PERSISTED_SIGNAL: _DerivedSignalType.ValueType
    'A persisted signal that is evaluated and cached daily.\n    The expression refers to a raw signal and cannot be modified.\n    '

class DerivedSignalType(_DerivedSignalType, metaclass=_DerivedSignalTypeEnumTypeWrapper):
    """Type of the signal. Not relevant for external use."""
DERIVED_SIGNAL_TYPE_INVALID: DerivedSignalType.ValueType
'Signal type was not specified.'
DERIVED_SIGNAL: DerivedSignalType.ValueType
'Signal is a derived signal, with an editable label and expression. This is the default value.'
FILE_UPLOADED_SIGNAL: DerivedSignalType.ValueType
'Signal uploaded through the legacy File Uploader. The expression refers to a raw signal and\ncannot be modified.\n'
FILE_UPLOADED_COMPANY_SIGNAL: DerivedSignalType.ValueType
'Signal uploaded through the legacy File Uploader. The expression refers to a raw signal and\ncannot be modified.\n'
PERSISTED_SIGNAL: DerivedSignalType.ValueType
'A persisted signal that is evaluated and cached daily.\nThe expression refers to a raw signal and cannot be modified.\n'
global___DerivedSignalType = DerivedSignalType

@typing_extensions.final
class DerivedSignal(google.protobuf.message.Message):
    """A derived signal.

    As opposed to raw signals which represents time series on entities, a derived signal
    represents a calculation through a DSL expression.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    EXPRESSION_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    name: builtins.str
    'Unique resource name of the derived signal, e.g. `derivedSignals/123`. In the "Create derived\n    signal" method, this is ignored and may be left empty.\n    '
    label: builtins.str
    'Label of the derived signal. This appears in the Library when browsing for derived signals,\n    and when a derived signal is used in any Exabel feature (e.g. chart, dashboard). It can also\n    be used to reference this derived signal in a second derived signal.\n\n    This is required when creating a derived signal. Must be a valid Python identifier between\n    1-100 characters, match the regex `^[a-zA-Z_]\\w{0,99}$`, and cannot be a Python keyword.\n    '
    expression: builtins.str
    'A DSL expression describing the signal transformations to apply. For more information, see the\n    DSL reference.\n    '
    description: builtins.str
    'Appears in the Exabel Library, when browsing for derived signals.'

    @property
    def metadata(self) -> global___DerivedSignalMetadata:
        """Additional metadata to control formatting (decimals and units)."""

    def __init__(self, *, name: builtins.str | None=..., label: builtins.str | None=..., expression: builtins.str | None=..., description: builtins.str | None=..., metadata: global___DerivedSignalMetadata | None=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['metadata', b'metadata']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['description', b'description', 'expression', b'expression', 'label', b'label', 'metadata', b'metadata', 'name', b'name']) -> None:
        ...
global___DerivedSignal = DerivedSignal

@typing_extensions.final
class DerivedSignalMetadata(google.protobuf.message.Message):
    """Additional metadata to control formatting (decimals and units).

    Note: this is only used today when a signal is added to a dashboard table. This will be phased
    out in favour of providing formatting controls in the Exabel features (charts, dashboards, etc.)
    where signals are used.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DECIMALS_FIELD_NUMBER: builtins.int
    UNIT_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int

    @property
    def decimals(self) -> google.protobuf.wrappers_pb2.Int32Value:
        """Number of decimals to use when displaying numeric values."""
    unit: global___DerivedSignalUnit.ValueType
    'Unit of the signal.'
    type: global___DerivedSignalType.ValueType
    'Type of the signal. Not relevant for external use.'

    def __init__(self, *, decimals: google.protobuf.wrappers_pb2.Int32Value | None=..., unit: global___DerivedSignalUnit.ValueType | None=..., type: global___DerivedSignalType.ValueType | None=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['decimals', b'decimals']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['decimals', b'decimals', 'type', b'type', 'unit', b'unit']) -> None:
        ...
global___DerivedSignalMetadata = DerivedSignalMetadata