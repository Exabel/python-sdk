"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright (c) 2022 Exabel AS. All rights reserved."""
import builtins
from ..... import exabel
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.message
import sys
if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class GetDerivedSignalRequest(google.protobuf.message.Message):
    """Request to GetDerivedSignal."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    name: builtins.str
    'The derived signal resource name.'

    def __init__(self, *, name: builtins.str | None=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['name', b'name']) -> None:
        ...
global___GetDerivedSignalRequest = GetDerivedSignalRequest

@typing_extensions.final
class CreateDerivedSignalRequest(google.protobuf.message.Message):
    """Request to CreateDerivedSignal."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SIGNAL_FIELD_NUMBER: builtins.int
    FOLDER_FIELD_NUMBER: builtins.int

    @property
    def signal(self) -> exabel.api.analytics.v1.derived_signal_messages_pb2.DerivedSignal:
        """A derived signal."""
    folder: builtins.str
    'Resource name of the Library folder to create the signal in, e.g. `folders/123`. If not\n    specified, the signal will be created in an “Analytics API” folder that is shared with the\n    customer user group.\n    '

    def __init__(self, *, signal: exabel.api.analytics.v1.derived_signal_messages_pb2.DerivedSignal | None=..., folder: builtins.str | None=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['signal', b'signal']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['folder', b'folder', 'signal', b'signal']) -> None:
        ...
global___CreateDerivedSignalRequest = CreateDerivedSignalRequest

@typing_extensions.final
class UpdateDerivedSignalRequest(google.protobuf.message.Message):
    """Request to UpdateDerivedSignal."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SIGNAL_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int

    @property
    def signal(self) -> exabel.api.analytics.v1.derived_signal_messages_pb2.DerivedSignal:
        """A derived signal."""

    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Use this to update only selected fields. For example, specify `expression` to update only
        the expression.

        For REST requests, this is a comma-separated string.
        """

    def __init__(self, *, signal: exabel.api.analytics.v1.derived_signal_messages_pb2.DerivedSignal | None=..., update_mask: google.protobuf.field_mask_pb2.FieldMask | None=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['signal', b'signal', 'update_mask', b'update_mask']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['signal', b'signal', 'update_mask', b'update_mask']) -> None:
        ...
global___UpdateDerivedSignalRequest = UpdateDerivedSignalRequest

@typing_extensions.final
class DeleteDerivedSignalRequest(google.protobuf.message.Message):
    """Request to DeleteDerivedSignal."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    name: builtins.str
    'The derived signal resource name.'

    def __init__(self, *, name: builtins.str | None=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['name', b'name']) -> None:
        ...
global___DeleteDerivedSignalRequest = DeleteDerivedSignalRequest