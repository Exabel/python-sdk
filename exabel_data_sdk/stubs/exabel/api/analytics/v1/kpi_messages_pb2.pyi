"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright (c) 2025 Exabel AS. All rights reserved."""
import builtins
import collections.abc
from ..... import exabel
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing
if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _KpiSource:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _KpiSourceEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_KpiSource.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    KPI_SOURCE_UNSPECIFIED: _KpiSource.ValueType
    'Unspecified.'
    KPI_SOURCE_VISIBLE_ALPHA: _KpiSource.ValueType
    'Visible Alpha.'
    KPI_SOURCE_FACTSET: _KpiSource.ValueType
    'FactSet.'

class KpiSource(_KpiSource, metaclass=_KpiSourceEnumTypeWrapper):
    """KPI source."""
KPI_SOURCE_UNSPECIFIED: KpiSource.ValueType
'Unspecified.'
KPI_SOURCE_VISIBLE_ALPHA: KpiSource.ValueType
'Visible Alpha.'
KPI_SOURCE_FACTSET: KpiSource.ValueType
'FactSet.'
global___KpiSource = KpiSource

class _ModelQuality:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ModelQualityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ModelQuality.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    MODEL_QUALITY_UNSPECIFIED: _ModelQuality.ValueType
    'Unspecified.'
    MODEL_QUALITY_LOW: _ModelQuality.ValueType
    'Low quality.'
    MODEL_QUALITY_MEDIUM: _ModelQuality.ValueType
    'Medium quality.'
    MODEL_QUALITY_HIGH: _ModelQuality.ValueType
    'High quality.'
    MODEL_QUALITY_VERY_HIGH: _ModelQuality.ValueType
    'Very high quality.'

class ModelQuality(_ModelQuality, metaclass=_ModelQualityEnumTypeWrapper):
    """Model quality."""
MODEL_QUALITY_UNSPECIFIED: ModelQuality.ValueType
'Unspecified.'
MODEL_QUALITY_LOW: ModelQuality.ValueType
'Low quality.'
MODEL_QUALITY_MEDIUM: ModelQuality.ValueType
'Medium quality.'
MODEL_QUALITY_HIGH: ModelQuality.ValueType
'High quality.'
MODEL_QUALITY_VERY_HIGH: ModelQuality.ValueType
'Very high quality.'
global___ModelQuality = ModelQuality

class _RelativeFiscalPeriodSelector:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _RelativeFiscalPeriodSelectorEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RelativeFiscalPeriodSelector.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    RELATIVE_FISCAL_PERIOD_SELECTOR_UNSPECIFIED: _RelativeFiscalPeriodSelector.ValueType
    'Unspecified.'
    PREVIOUS: _RelativeFiscalPeriodSelector.ValueType
    'Last reported fiscal period.'
    CURRENT: _RelativeFiscalPeriodSelector.ValueType
    'Current unreported fiscal period.'
    NEXT: _RelativeFiscalPeriodSelector.ValueType
    'Next unreported fiscal period.'

class RelativeFiscalPeriodSelector(_RelativeFiscalPeriodSelector, metaclass=_RelativeFiscalPeriodSelectorEnumTypeWrapper):
    """Selector for a relative fiscal period."""
RELATIVE_FISCAL_PERIOD_SELECTOR_UNSPECIFIED: RelativeFiscalPeriodSelector.ValueType
'Unspecified.'
PREVIOUS: RelativeFiscalPeriodSelector.ValueType
'Last reported fiscal period.'
CURRENT: RelativeFiscalPeriodSelector.ValueType
'Current unreported fiscal period.'
NEXT: RelativeFiscalPeriodSelector.ValueType
'Next unreported fiscal period.'
global___RelativeFiscalPeriodSelector = RelativeFiscalPeriodSelector

@typing.final
class CompanyKpiMappingResults(google.protobuf.message.Message):
    """KPI mapping results for a single company."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ENTITY_FIELD_NUMBER: builtins.int
    KPI_RESULTS_FIELD_NUMBER: builtins.int

    @property
    def entity(self) -> global___Company:
        """The company these results apply to."""

    @property
    def kpi_results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SingleCompanyKpiMappingResults]:
        """The results for each KPI."""

    def __init__(self, *, entity: global___Company | None=..., kpi_results: collections.abc.Iterable[global___SingleCompanyKpiMappingResults] | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['entity', b'entity']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['entity', b'entity', 'kpi_results', b'kpi_results']) -> None:
        ...
global___CompanyKpiMappingResults = CompanyKpiMappingResults

@typing.final
class Company(google.protobuf.message.Message):
    """A company."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    BLOOMBERG_TICKER_FIELD_NUMBER: builtins.int
    name: builtins.str
    'The resource name of the company.'
    display_name: builtins.str
    'The display name of the company.'
    bloomberg_ticker: builtins.str
    'The bloomberg ticker of the company.'

    def __init__(self, *, name: builtins.str | None=..., display_name: builtins.str | None=..., bloomberg_ticker: builtins.str | None=...) -> None:
        ...

    def ClearField(self, field_name: typing.Literal['bloomberg_ticker', b'bloomberg_ticker', 'display_name', b'display_name', 'name', b'name']) -> None:
        ...
global___Company = Company

@typing.final
class SingleCompanyKpiMappingResults(google.protobuf.message.Message):
    """KPI mapping results for a single company KPI."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KPI_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int

    @property
    def kpi(self) -> global___Kpi:
        """The KPI."""

    @property
    def data(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___KpiMappingResultData]:
        """The KPI mapping results for this KPI."""

    def __init__(self, *, kpi: global___Kpi | None=..., data: collections.abc.Iterable[global___KpiMappingResultData] | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['kpi', b'kpi']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['data', b'data', 'kpi', b'kpi']) -> None:
        ...
global___SingleCompanyKpiMappingResults = SingleCompanyKpiMappingResults

@typing.final
class Kpi(google.protobuf.message.Message):
    """A KPI."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TYPE_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    FREQ_FIELD_NUMBER: builtins.int
    IS_RATIO_FIELD_NUMBER: builtins.int
    type: builtins.str
    'The type of the KPI. A KPI is one of the following types:\n    - `FACTSET_ESTIMATES`: FactSet actuals/estimates.\n    - `FACTSET_FUNDAMENTALS`: FactSet fundamentals.\n    - `FACTSET_SEGMENTS`: FactSet segments.\n    - `VISIBLE_ALPHA_STANDARD_KPI`: Visible Alpha standard KPI.\n    '
    value: builtins.str
    'A value which is dependent on the type:\n    - `FACTSET_ESTIMATES`: Reporting number, e.g. `SALES`.\n    - `FACTSET_FUNDAMENTALS`: Reporting number, e.g. `SALES`.\n    - `FACTSET_SEGMENTS`: Factset segment resource name, e.g. `entityTypes/geo_segment/entities/factset.segment_123`.\n    - `VISIBLE_ALPHA_STANDARD_KPI`: Line item parameter id. For example, the "Total revenue" parameter has a parameter id of `190`.\n    '
    display_name: builtins.str
    'The display name of the KPI.'
    freq: builtins.str
    'A textual representation of the KPI frequency. Either `FQ`, `FS` or `FY`.'
    is_ratio: builtins.bool
    'Whether this KPI is a ratio or not.'

    def __init__(self, *, type: builtins.str | None=..., value: builtins.str | None=..., display_name: builtins.str | None=..., freq: builtins.str | None=..., is_ratio: builtins.bool | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['_freq', b'_freq', '_is_ratio', b'_is_ratio', '_value', b'_value', 'freq', b'freq', 'is_ratio', b'is_ratio', 'value', b'value']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['_freq', b'_freq', '_is_ratio', b'_is_ratio', '_value', b'_value', 'display_name', b'display_name', 'freq', b'freq', 'is_ratio', b'is_ratio', 'type', b'type', 'value', b'value']) -> None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_freq', b'_freq']) -> typing.Literal['freq'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_is_ratio', b'_is_ratio']) -> typing.Literal['is_ratio'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_value', b'_value']) -> typing.Literal['value'] | None:
        ...
global___Kpi = Kpi

@typing.final
class KpiMappingResultData(google.protobuf.message.Message):
    """Data for a KPI mapping result."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SOURCE_FIELD_NUMBER: builtins.int
    MODEL_MAPE_FIELD_NUMBER: builtins.int
    MODEL_MAE_FIELD_NUMBER: builtins.int
    MODEL_HIT_RATE_FIELD_NUMBER: builtins.int
    LAST_VALUE_DATE_FIELD_NUMBER: builtins.int
    NUMBER_OF_DATA_POINTS_FIELD_NUMBER: builtins.int
    PERIOD_OVER_PERIOD_MAE_FIELD_NUMBER: builtins.int
    YEAR_OVER_YEAR_MAE_FIELD_NUMBER: builtins.int
    ABSOLUTE_CORRELATION_FIELD_NUMBER: builtins.int
    PERIOD_OVER_PERIOD_CORRELATION_FIELD_NUMBER: builtins.int
    YEAR_OVER_YEAR_CORRELATION_FIELD_NUMBER: builtins.int
    ABSOLUTE_P_VALUE_FIELD_NUMBER: builtins.int
    PERIOD_OVER_PERIOD_P_VALUE_FIELD_NUMBER: builtins.int
    YEAR_OVER_YEAR_P_VALUE_FIELD_NUMBER: builtins.int
    model_mape: builtins.float
    'Mean absolute percentage error for a model built using this proxy.'
    model_mae: builtins.float
    'Mean absolute error for a model built using this proxy.'
    model_hit_rate: builtins.float
    'Hit rate for a model built using this proxy.'
    number_of_data_points: builtins.int
    'Number of data points (after resampling).\n    This is the number of data points where both the KPI and the proxy have data.\n    '
    period_over_period_mae: builtins.float
    'Period-over-period mean absolute error.'
    year_over_year_mae: builtins.float
    'Year-over-year mean absolute error.'
    absolute_correlation: builtins.float
    'Absolute correlation.'
    period_over_period_correlation: builtins.float
    'Period-over-period correlation.'
    year_over_year_correlation: builtins.float
    'Year-over-year correlation.'
    absolute_p_value: builtins.float
    'Absolute P-value.'
    period_over_period_p_value: builtins.float
    'Period-over-period P-value.'
    year_over_year_p_value: builtins.float
    'Year-over-year P-value.'

    @property
    def source(self) -> global___KpiMappingGroup:
        """The KPI mapping group from which this result originates"""

    @property
    def last_value_date(self) -> exabel.api.time.date_pb2.Date:
        """The date of the last observed proxy value."""

    def __init__(self, *, source: global___KpiMappingGroup | None=..., model_mape: builtins.float | None=..., model_mae: builtins.float | None=..., model_hit_rate: builtins.float | None=..., last_value_date: exabel.api.time.date_pb2.Date | None=..., number_of_data_points: builtins.int | None=..., period_over_period_mae: builtins.float | None=..., year_over_year_mae: builtins.float | None=..., absolute_correlation: builtins.float | None=..., period_over_period_correlation: builtins.float | None=..., year_over_year_correlation: builtins.float | None=..., absolute_p_value: builtins.float | None=..., period_over_period_p_value: builtins.float | None=..., year_over_year_p_value: builtins.float | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['_absolute_correlation', b'_absolute_correlation', '_absolute_p_value', b'_absolute_p_value', '_model_hit_rate', b'_model_hit_rate', '_model_mae', b'_model_mae', '_model_mape', b'_model_mape', '_number_of_data_points', b'_number_of_data_points', '_period_over_period_correlation', b'_period_over_period_correlation', '_period_over_period_mae', b'_period_over_period_mae', '_period_over_period_p_value', b'_period_over_period_p_value', '_year_over_year_correlation', b'_year_over_year_correlation', '_year_over_year_mae', b'_year_over_year_mae', '_year_over_year_p_value', b'_year_over_year_p_value', 'absolute_correlation', b'absolute_correlation', 'absolute_p_value', b'absolute_p_value', 'last_value_date', b'last_value_date', 'model_hit_rate', b'model_hit_rate', 'model_mae', b'model_mae', 'model_mape', b'model_mape', 'number_of_data_points', b'number_of_data_points', 'period_over_period_correlation', b'period_over_period_correlation', 'period_over_period_mae', b'period_over_period_mae', 'period_over_period_p_value', b'period_over_period_p_value', 'source', b'source', 'year_over_year_correlation', b'year_over_year_correlation', 'year_over_year_mae', b'year_over_year_mae', 'year_over_year_p_value', b'year_over_year_p_value']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['_absolute_correlation', b'_absolute_correlation', '_absolute_p_value', b'_absolute_p_value', '_model_hit_rate', b'_model_hit_rate', '_model_mae', b'_model_mae', '_model_mape', b'_model_mape', '_number_of_data_points', b'_number_of_data_points', '_period_over_period_correlation', b'_period_over_period_correlation', '_period_over_period_mae', b'_period_over_period_mae', '_period_over_period_p_value', b'_period_over_period_p_value', '_year_over_year_correlation', b'_year_over_year_correlation', '_year_over_year_mae', b'_year_over_year_mae', '_year_over_year_p_value', b'_year_over_year_p_value', 'absolute_correlation', b'absolute_correlation', 'absolute_p_value', b'absolute_p_value', 'last_value_date', b'last_value_date', 'model_hit_rate', b'model_hit_rate', 'model_mae', b'model_mae', 'model_mape', b'model_mape', 'number_of_data_points', b'number_of_data_points', 'period_over_period_correlation', b'period_over_period_correlation', 'period_over_period_mae', b'period_over_period_mae', 'period_over_period_p_value', b'period_over_period_p_value', 'source', b'source', 'year_over_year_correlation', b'year_over_year_correlation', 'year_over_year_mae', b'year_over_year_mae', 'year_over_year_p_value', b'year_over_year_p_value']) -> None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_absolute_correlation', b'_absolute_correlation']) -> typing.Literal['absolute_correlation'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_absolute_p_value', b'_absolute_p_value']) -> typing.Literal['absolute_p_value'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_model_hit_rate', b'_model_hit_rate']) -> typing.Literal['model_hit_rate'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_model_mae', b'_model_mae']) -> typing.Literal['model_mae'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_model_mape', b'_model_mape']) -> typing.Literal['model_mape'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_number_of_data_points', b'_number_of_data_points']) -> typing.Literal['number_of_data_points'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_period_over_period_correlation', b'_period_over_period_correlation']) -> typing.Literal['period_over_period_correlation'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_period_over_period_mae', b'_period_over_period_mae']) -> typing.Literal['period_over_period_mae'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_period_over_period_p_value', b'_period_over_period_p_value']) -> typing.Literal['period_over_period_p_value'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_year_over_year_correlation', b'_year_over_year_correlation']) -> typing.Literal['year_over_year_correlation'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_year_over_year_mae', b'_year_over_year_mae']) -> typing.Literal['year_over_year_mae'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_year_over_year_p_value', b'_year_over_year_p_value']) -> typing.Literal['year_over_year_p_value'] | None:
        ...
global___KpiMappingResultData = KpiMappingResultData

@typing.final
class KpiMappingGroup(google.protobuf.message.Message):
    """KPI mapping group."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    VENDOR_DISPLAY_NAME_FIELD_NUMBER: builtins.int
    name: builtins.str
    'Resource name.'
    display_name: builtins.str
    'Display name.'
    vendor_display_name: builtins.str
    'Vendor display name.'

    def __init__(self, *, name: builtins.str | None=..., display_name: builtins.str | None=..., vendor_display_name: builtins.str | None=...) -> None:
        ...

    def ClearField(self, field_name: typing.Literal['display_name', b'display_name', 'name', b'name', 'vendor_display_name', b'vendor_display_name']) -> None:
        ...
global___KpiMappingGroup = KpiMappingGroup

@typing.final
class CompanyKpiModelResult(google.protobuf.message.Message):
    """Result for a single company KPI."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KPI_FIELD_NUMBER: builtins.int
    MODEL_FIELD_NUMBER: builtins.int
    ACCESSIBLE_MAPPINGS_COUNT_FIELD_NUMBER: builtins.int
    TOTAL_MAPPINGS_COUNT_FIELD_NUMBER: builtins.int
    MODELS_COUNT_FIELD_NUMBER: builtins.int
    accessible_mappings_count: builtins.int
    'Number of KPI mappings for this company KPI that the current user has access to.'
    total_mappings_count: builtins.int
    'Total number of KPI mappings for this company KPI, including both accessible\n    KPI mappings and public KPI mappings.\n    '
    models_count: builtins.int
    'Number of models for this company KPI.'

    @property
    def kpi(self) -> global___Kpi:
        """KPI."""

    @property
    def model(self) -> global___KpiModel:
        """KPI model."""

    def __init__(self, *, kpi: global___Kpi | None=..., model: global___KpiModel | None=..., accessible_mappings_count: builtins.int | None=..., total_mappings_count: builtins.int | None=..., models_count: builtins.int | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['kpi', b'kpi', 'model', b'model']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['accessible_mappings_count', b'accessible_mappings_count', 'kpi', b'kpi', 'model', b'model', 'models_count', b'models_count', 'total_mappings_count', b'total_mappings_count']) -> None:
        ...
global___CompanyKpiModelResult = CompanyKpiModelResult

@typing.final
class KpiModel(google.protobuf.message.Message):
    """A KPI model."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    WEIGHTS_FIELD_NUMBER: builtins.int
    name: builtins.str
    'Resource name.'
    id: builtins.int
    'Integer id.'
    display_name: builtins.str
    'Display name.'

    @property
    def data(self) -> global___KpiModelData:
        """Model data."""

    @property
    def weights(self) -> global___KpiModelWeightGroups:
        """Model weights."""

    def __init__(self, *, name: builtins.str | None=..., id: builtins.int | None=..., display_name: builtins.str | None=..., data: global___KpiModelData | None=..., weights: global___KpiModelWeightGroups | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['data', b'data', 'weights', b'weights']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['data', b'data', 'display_name', b'display_name', 'id', b'id', 'name', b'name', 'weights', b'weights']) -> None:
        ...
global___KpiModel = KpiModel

@typing.final
class KpiMappingModel(google.protobuf.message.Message):
    """Single-predictor KPI mapping model."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SOURCE_FIELD_NUMBER: builtins.int
    KPI_MODEL_DATA_FIELD_NUMBER: builtins.int

    @property
    def source(self) -> global___KpiMappingGroup:
        """The KPI mapping group from which the model originates"""

    @property
    def kpi_model_data(self) -> global___KpiModelData:
        """Model data."""

    def __init__(self, *, source: global___KpiMappingGroup | None=..., kpi_model_data: global___KpiModelData | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['kpi_model_data', b'kpi_model_data', 'source', b'source']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['kpi_model_data', b'kpi_model_data', 'source', b'source']) -> None:
        ...
global___KpiMappingModel = KpiMappingModel

@typing.final
class KpiModelData(google.protobuf.message.Message):
    """Data for a KPI model."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PREDICTION_FIELD_NUMBER: builtins.int
    PREDICTION_YOY_REL_FIELD_NUMBER: builtins.int
    PREDICTION_YOY_ABS_FIELD_NUMBER: builtins.int
    CONSENSUS_FIELD_NUMBER: builtins.int
    CONSENSUS_YOY_REL_FIELD_NUMBER: builtins.int
    CONSENSUS_YOY_ABS_FIELD_NUMBER: builtins.int
    DELTA_ABS_FIELD_NUMBER: builtins.int
    DELTA_REL_FIELD_NUMBER: builtins.int
    DELTA_BY_ERROR_FIELD_NUMBER: builtins.int
    MODEL_QUALITY_FIELD_NUMBER: builtins.int
    MAPE_FIELD_NUMBER: builtins.int
    MAPE_PIT_FIELD_NUMBER: builtins.int
    MAE_FIELD_NUMBER: builtins.int
    MAE_PIT_FIELD_NUMBER: builtins.int
    HIT_RATE_FIELD_NUMBER: builtins.int
    REVISION_1_WEEK_FIELD_NUMBER: builtins.int
    REVISION_1_MONTH_FIELD_NUMBER: builtins.int
    DATE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    prediction: builtins.float
    'Absolute prediction.'
    prediction_yoy_rel: builtins.float
    'Year-over-year prediction relative change.\n    This is the absolute prediction compared to the observed value for the\n    same period one year ago.\n    '
    prediction_yoy_abs: builtins.float
    'Year-over-year prediction absolute change.\n    This is the absolute prediction compared to the observed value for the\n    same period one year ago.\n    '
    consensus: builtins.float
    'Consensus.\n    Only available for Visible Alpha KPIs for users with a subscription with export allowed.\n    '
    consensus_yoy_rel: builtins.float
    'Year-over-year consensus relative change.\n    This is the consensus compared to the observed value for the\n    same period one year ago.\n    '
    consensus_yoy_abs: builtins.float
    'Year-over-year consensus absolute change.\n    This is the consensus compared to the observed value for the\n    same period one year ago.\n    '
    delta_abs: builtins.float
    'Absolute difference between the prediction and the consensus.\n    This is calculated as prediction - consensus.\n    Only available for Visible Alpha KPIs for users with a subscription with export allowed.\n    '
    delta_rel: builtins.float
    'Relative difference between the prediction and the consensus.\n    This is calculated as (prediction / consensus) - 1.\n    Only available for Visible Alpha KPIs for users with a subscription with export allowed.\n    '
    delta_by_error: builtins.float
    'The delta divided by the error.\n    For ratio KPIs this is absolute delta / mae (using PiT mae if available).\n    For non-ratio KPIs this is relative delta / mape (using PiT mape if available).\n    Only available for Visible Alpha KPIs for users with a subscription with export allowed.\n    '
    model_quality: global___ModelQuality.ValueType
    'Model quality.'
    mape: builtins.float
    'Mean absolute percentage error.'
    mape_pit: builtins.float
    'Point-in-time mean absolute percentage error.'
    mae: builtins.float
    'Mean absolute error.'
    mae_pit: builtins.float
    'Point-in-time mean absolute error.'
    hit_rate: builtins.float
    'Hit rate.'
    revision_1_week: builtins.float
    'Revision to the predicted value compared to the prediction from 1 week ago.\n    If the KPI is a ratio, this is just the difference between the current prediction and the\n    prediction from 1 week ago, otherwise this is the relative change.\n    For Exabel Models and custom models, a backtest may be used to get the historical prediction.\n    '
    revision_1_month: builtins.float
    'Revision to the predicted value compared to the prediction from 1 month ago.\n    If the KPI is a ratio, this is just the difference between the current prediction and the\n    prediction from 1 month ago, otherwise this is the relative change.\n    For Exabel Models and custom models, a backtest may be used to get the historical prediction.\n    '
    error: builtins.str
    'An error message in case the model training or backtesting failed.'

    @property
    def date(self) -> exabel.api.time.date_pb2.Date:
        """The fiscal period end date for which the prediction has been made."""

    def __init__(self, *, prediction: builtins.float | None=..., prediction_yoy_rel: builtins.float | None=..., prediction_yoy_abs: builtins.float | None=..., consensus: builtins.float | None=..., consensus_yoy_rel: builtins.float | None=..., consensus_yoy_abs: builtins.float | None=..., delta_abs: builtins.float | None=..., delta_rel: builtins.float | None=..., delta_by_error: builtins.float | None=..., model_quality: global___ModelQuality.ValueType | None=..., mape: builtins.float | None=..., mape_pit: builtins.float | None=..., mae: builtins.float | None=..., mae_pit: builtins.float | None=..., hit_rate: builtins.float | None=..., revision_1_week: builtins.float | None=..., revision_1_month: builtins.float | None=..., date: exabel.api.time.date_pb2.Date | None=..., error: builtins.str | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['_consensus', b'_consensus', '_consensus_yoy_abs', b'_consensus_yoy_abs', '_consensus_yoy_rel', b'_consensus_yoy_rel', '_delta_abs', b'_delta_abs', '_delta_by_error', b'_delta_by_error', '_delta_rel', b'_delta_rel', '_hit_rate', b'_hit_rate', '_mae', b'_mae', '_mae_pit', b'_mae_pit', '_mape', b'_mape', '_mape_pit', b'_mape_pit', '_prediction', b'_prediction', '_prediction_yoy_abs', b'_prediction_yoy_abs', '_prediction_yoy_rel', b'_prediction_yoy_rel', '_revision_1_month', b'_revision_1_month', '_revision_1_week', b'_revision_1_week', 'consensus', b'consensus', 'consensus_yoy_abs', b'consensus_yoy_abs', 'consensus_yoy_rel', b'consensus_yoy_rel', 'date', b'date', 'delta_abs', b'delta_abs', 'delta_by_error', b'delta_by_error', 'delta_rel', b'delta_rel', 'hit_rate', b'hit_rate', 'mae', b'mae', 'mae_pit', b'mae_pit', 'mape', b'mape', 'mape_pit', b'mape_pit', 'prediction', b'prediction', 'prediction_yoy_abs', b'prediction_yoy_abs', 'prediction_yoy_rel', b'prediction_yoy_rel', 'revision_1_month', b'revision_1_month', 'revision_1_week', b'revision_1_week']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['_consensus', b'_consensus', '_consensus_yoy_abs', b'_consensus_yoy_abs', '_consensus_yoy_rel', b'_consensus_yoy_rel', '_delta_abs', b'_delta_abs', '_delta_by_error', b'_delta_by_error', '_delta_rel', b'_delta_rel', '_hit_rate', b'_hit_rate', '_mae', b'_mae', '_mae_pit', b'_mae_pit', '_mape', b'_mape', '_mape_pit', b'_mape_pit', '_prediction', b'_prediction', '_prediction_yoy_abs', b'_prediction_yoy_abs', '_prediction_yoy_rel', b'_prediction_yoy_rel', '_revision_1_month', b'_revision_1_month', '_revision_1_week', b'_revision_1_week', 'consensus', b'consensus', 'consensus_yoy_abs', b'consensus_yoy_abs', 'consensus_yoy_rel', b'consensus_yoy_rel', 'date', b'date', 'delta_abs', b'delta_abs', 'delta_by_error', b'delta_by_error', 'delta_rel', b'delta_rel', 'error', b'error', 'hit_rate', b'hit_rate', 'mae', b'mae', 'mae_pit', b'mae_pit', 'mape', b'mape', 'mape_pit', b'mape_pit', 'model_quality', b'model_quality', 'prediction', b'prediction', 'prediction_yoy_abs', b'prediction_yoy_abs', 'prediction_yoy_rel', b'prediction_yoy_rel', 'revision_1_month', b'revision_1_month', 'revision_1_week', b'revision_1_week']) -> None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_consensus', b'_consensus']) -> typing.Literal['consensus'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_consensus_yoy_abs', b'_consensus_yoy_abs']) -> typing.Literal['consensus_yoy_abs'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_consensus_yoy_rel', b'_consensus_yoy_rel']) -> typing.Literal['consensus_yoy_rel'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_delta_abs', b'_delta_abs']) -> typing.Literal['delta_abs'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_delta_by_error', b'_delta_by_error']) -> typing.Literal['delta_by_error'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_delta_rel', b'_delta_rel']) -> typing.Literal['delta_rel'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_hit_rate', b'_hit_rate']) -> typing.Literal['hit_rate'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_mae', b'_mae']) -> typing.Literal['mae'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_mae_pit', b'_mae_pit']) -> typing.Literal['mae_pit'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_mape', b'_mape']) -> typing.Literal['mape'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_mape_pit', b'_mape_pit']) -> typing.Literal['mape_pit'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_prediction', b'_prediction']) -> typing.Literal['prediction'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_prediction_yoy_abs', b'_prediction_yoy_abs']) -> typing.Literal['prediction_yoy_abs'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_prediction_yoy_rel', b'_prediction_yoy_rel']) -> typing.Literal['prediction_yoy_rel'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_revision_1_month', b'_revision_1_month']) -> typing.Literal['revision_1_month'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_revision_1_week', b'_revision_1_week']) -> typing.Literal['revision_1_week'] | None:
        ...
global___KpiModelData = KpiModelData

@typing.final
class KpiModelWeightGroups(google.protobuf.message.Message):
    """KPI model weight groups."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    WEIGHT_GROUPS_FIELD_NUMBER: builtins.int
    IS_COEFFICIENTS_FIELD_NUMBER: builtins.int
    is_coefficients: builtins.bool
    'Whether the weights are coefficients that should be formatted as decimal numbers.\n    If false, the weights are normalized weights that add up to 1.\n    '

    @property
    def weight_groups(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___KpiModelWeightGroup]:
        """Weights for all predictors in the model."""

    def __init__(self, *, weight_groups: collections.abc.Iterable[global___KpiModelWeightGroup] | None=..., is_coefficients: builtins.bool | None=...) -> None:
        ...

    def ClearField(self, field_name: typing.Literal['is_coefficients', b'is_coefficients', 'weight_groups', b'weight_groups']) -> None:
        ...
global___KpiModelWeightGroups = KpiModelWeightGroups

@typing.final
class KpiModelWeightGroup(google.protobuf.message.Message):
    """Weight for a group of related KPI model input features."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    GROUP_FIELD_NUMBER: builtins.int
    FEATURE_WEIGHTS_FIELD_NUMBER: builtins.int
    display_name: builtins.str
    "Display name of the model input feature/predictor.\n    For ratio prediction models, this is either 'Baseline' (representing the predictor built by forecasting\n    the KPI time series) or it is the display name of the KPI mapping group from which the predictor originates.\n    For other model types, display names include 'Seasonality' and 'Reported KPI (lagged)'.\n    "

    @property
    def group(self) -> global___KpiMappingGroup:
        """The KPI mapping group from which the predictor originates.
        Only set when the predictor originates from a KPI mapping group.
        """

    @property
    def feature_weights(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___KpiModelFeatureWeight]:
        """The individual feature weights."""

    def __init__(self, *, display_name: builtins.str | None=..., group: global___KpiMappingGroup | None=..., feature_weights: collections.abc.Iterable[global___KpiModelFeatureWeight] | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['group', b'group']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['display_name', b'display_name', 'feature_weights', b'feature_weights', 'group', b'group']) -> None:
        ...
global___KpiModelWeightGroup = KpiModelWeightGroup

@typing.final
class KpiModelFeatureWeight(google.protobuf.message.Message):
    """Weight for a single KPI model input feature."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    WEIGHT_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    weight: builtins.float
    'The weight of the input feature.'
    display_name: builtins.str
    "Display name of the feature.\n    If there is only a single feature weight, this is identical to the `KpiModelWeightGroup.display_name`.\n    If there are multiple feature weights, this is the display name of the feature. For example,\n    for seasonality, the individual feature weights may include 'Q1', 'Q2', 'Q3', 'Q4' (for the quarter features).\n    "

    def __init__(self, *, weight: builtins.float | None=..., display_name: builtins.str | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['_weight', b'_weight', 'weight', b'weight']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['_weight', b'_weight', 'display_name', b'display_name', 'weight', b'weight']) -> None:
        ...

    def WhichOneof(self, oneof_group: typing.Literal['_weight', b'_weight']) -> typing.Literal['weight'] | None:
        ...
global___KpiModelFeatureWeight = KpiModelFeatureWeight

@typing.final
class FiscalPeriodSelector(google.protobuf.message.Message):
    """Selector for a fiscal period."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    RELATIVE_SELECTOR_FIELD_NUMBER: builtins.int
    PERIOD_END_FIELD_NUMBER: builtins.int
    FREQ_FIELD_NUMBER: builtins.int
    relative_selector: global___RelativeFiscalPeriodSelector.ValueType
    'Relative fiscal period.'
    freq: builtins.str
    'Fiscal period frequency.\n    Allowed values are empty, "FQ", "FS" and "FY".\n    Must be set to either "FQ", "FS" or "FY" if `period_end` is specified.\n    If empty, frequency is determined based on KPI counts. The frequency\n    with the most number of KPIs with mappings for the user is used.\n    '

    @property
    def period_end(self) -> exabel.api.time.date_pb2.Date:
        """Specific fiscal period end."""

    def __init__(self, *, relative_selector: global___RelativeFiscalPeriodSelector.ValueType | None=..., period_end: exabel.api.time.date_pb2.Date | None=..., freq: builtins.str | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['period_end', b'period_end']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['freq', b'freq', 'period_end', b'period_end', 'relative_selector', b'relative_selector']) -> None:
        ...
global___FiscalPeriodSelector = FiscalPeriodSelector

@typing.final
class KpiHierarchy(google.protobuf.message.Message):
    """Represents a hierarchy of KPIs for a specific company."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    FREQ_FIELD_NUMBER: builtins.int
    BREAKDOWN_FIELD_NUMBER: builtins.int
    name: builtins.str
    'The resource name of the KPI hierarchy, e.g., "kpiHierarchies/135".'
    freq: builtins.str
    'The frequency of the KPIs in this hierarchy.'

    @property
    def breakdown(self) -> global___KpiBreakdown:
        """A breakdown of the KPIs."""

    def __init__(self, *, name: builtins.str | None=..., freq: builtins.str | None=..., breakdown: global___KpiBreakdown | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['breakdown', b'breakdown']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['breakdown', b'breakdown', 'freq', b'freq', 'name', b'name']) -> None:
        ...
global___KpiHierarchy = KpiHierarchy

@typing.final
class KpiBreakdown(google.protobuf.message.Message):
    """A breakdown of the KPIs."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KPIS_FIELD_NUMBER: builtins.int

    @property
    def kpis(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___KpiBreakdownNode]:
        """The top-level nodes in the breakdown, each of which represents a KPI."""

    def __init__(self, *, kpis: collections.abc.Iterable[global___KpiBreakdownNode] | None=...) -> None:
        ...

    def ClearField(self, field_name: typing.Literal['kpis', b'kpis']) -> None:
        ...
global___KpiBreakdown = KpiBreakdown

@typing.final
class KpiBreakdownNode(google.protobuf.message.Message):
    """A node in the tree representing the breakdown of a KPI."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KPI_FIELD_NUMBER: builtins.int
    HEADER_FIELD_NUMBER: builtins.int
    CHILDREN_FIELD_NUMBER: builtins.int
    header: builtins.str
    'The string representing this node, when the node represents a grouping of KPIs and not a\n    single one.\n    '

    @property
    def kpi(self) -> global___Kpi:
        """The KPI represented by this node.
        Only StructuredKpi is supported, and only the KPI type and the value should be set.
        """

    @property
    def children(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___KpiBreakdownNode]:
        """The children of this node."""

    def __init__(self, *, kpi: global___Kpi | None=..., header: builtins.str | None=..., children: collections.abc.Iterable[global___KpiBreakdownNode] | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['content', b'content', 'header', b'header', 'kpi', b'kpi']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['children', b'children', 'content', b'content', 'header', b'header', 'kpi', b'kpi']) -> None:
        ...

    def WhichOneof(self, oneof_group: typing.Literal['content', b'content']) -> typing.Literal['kpi', 'header'] | None:
        ...
global___KpiBreakdownNode = KpiBreakdownNode